<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <env name="ARENA_TYPE" value="deployment" />

  <param name="if_viz" value="true" />
  <param name="debug_mode" value="true" />
  <arg name="desired_resets" default="10" />
  <param name="desired_resets" value="$(arg desired_resets)" />

  <arg name="timeout" default="" />
  <param name="task_generator_server/timeout" value="$(arg timeout)" if="$(eval arg('timeout') != '')" />


  <!-- ___________ ARGS ___________ -->
  <!-- You can launch a single robot and his local_planner with arguments -->
  <arg name="model" default="burger" doc="robot model type [burger, jackal, ridgeback, agvota, rto, ...]" />
  <arg name="inter_planner" default="bypass" doc="inter planner type [bypass, shortsighted, polite, aggressive, sideways]" />
  <arg name="local_planner" default="rosnav" doc="local planner type [teb, dwa, mpc, rlca, arena, rosnav, cohan]" />
  <arg name="simulator" default="flatland" doc="[flatland, gazebo]" />
  <arg name="headless" default="0" doc="0 = show all, 1 = show only rviz, 2 = show nothing" />
  <env name="SIMULATOR" value="$(arg simulator)" />
  <param name="headless" value="$(arg headless)" /> 

  <arg name="entity_manager" default="crowdsim" doc="[flatland, pedsim, crowdsim]" />
  <arg name="sfm" default="" doc="sfm for crowdsim [passthrough, pysocial]"/>

  <arg name="complexity" default="1" doc="1 = Map known, Position known; 2 = Map known, Position unknown (AMCL); 3 = Map unknown, Position unknown (SLAM)" />
  

  <arg name="agent_name" default="$(arg model)"     doc = "DRL agent name to be deployed" unless="$(eval arg('local_planner') != 'rosnav')" />
  <!-- Or you can load a robot setup file to launch multiple robots in the same simulation -->
  <!-- If the robot_setup_file is specified it is always loaded -->
  <arg name="robot_setup_file" default="" doc="" />

  <arg name="record_data" default="false" />
  <arg name="record_data_dir" default="auto:" />
  <param name="record_data_dir" type="str" value="$(arg record_data_dir)" if="$(eval arg('record_data'))"/>

  <param name="robot_setup_file" value="$(arg robot_setup_file)" />
  <param name="model" value="$(arg model)" />
  <param name="inter_planner" value="$(arg inter_planner)"/>
  <param name="local_planner" value="$(arg local_planner)"/>
  <param name="agent_name" value="$(arg agent_name)" unless="$(eval arg('local_planner') != 'rosnav')"/>
  

  <param name="complexity" value="$(arg complexity)" />
  

  <arg name="tm_robots" default="random"/>
  <arg name="tm_obstacles" default="random"/>
  <arg name="tm_modules" default="" />
  <arg name="benchmark_resume" default="false" />
  
  <arg name="visualization" default="rviz" doc="[rviz, flatland]" />
  <arg name="show_rviz" default="true" doc="Enables rviz in gazebo" />
  <arg name="rviz_file" default="nav_flatland_s20d20"/>
  
  <arg name="auto_reset" default="true"/>

  <arg name="reset_remove_all" default="true" />
  <param name="reset_remove_all" value="$(arg reset_remove_all)" />

  <arg name="map_file" default="map_empty" 
  doc="[
  map_empty, map_empty_medium, aws_house, bookstore, arena_hawker_centre, 
  experiment_room_2, experiment_room_3, experiment_room_4, ignc, 
  map1_small, map_empty_small
  ]" />
  <arg name="map_path" default="$(find arena_simulation_setup)/worlds/$(arg map_file)/map/map.yaml" />

  <arg name="world_file" default="$(arg map_file)" doc="set to generated_world to replace occupancy map with obstacles and walls (NOT IMPLEMENTED YET)"/>

  <!-- ___________ PARAMS ___________ -->
  <param name="use_sim_time" value="true"/>
  <param name="rosnav_move_base" value="true" />
  
  <param name="model" value="$(arg model)" />
  <param name="simulator" value="$(arg simulator)" />
  <param name="tm_robots" value="$(arg tm_robots)" />
  <param name="tm_obstacles" value="$(arg tm_obstacles)" />
  <param name="tm_modules" value="$(arg tm_modules)" />
  <param name="/benchmark_resume" value="$(arg benchmark_resume)" />
  <param name="map_path" value="$(arg map_path)" />
  <param name="train_mode" value="false" />
  <param name="show_viz" value="$(arg show_rviz)"/>
  <param name="entity_manager" value="$(arg entity_manager)" />


  <rosparam command="load" file="$(find arena_bringup)/params/flatland.yaml" />
  <rosparam command="load" file="$(find arena_bringup)/params/map_generator.yaml" ns="map_generator" />


  <!-- TEST IF YOU NEED THIS -->
  <rosparam command="load" file="$(find arena_simulation_setup)/entities/robots/$(arg model)/model_params.yaml" if="$(eval arg('robot_setup_file') == '')" /> 

  
  <!-- <param name="robot_yaml_path" value="$(find arena_simulation_setup)/entities/robots/$(arg model)/$(arg model).model.yaml" /> -->
  <!-- <param name="tmp_model_path" value="/tmp" /> -->

  <!-- the folder name under the path arena_simulation_setup/envs/maps  -->
  <param name="world_path" value="$(find arena_simulation_setup)/worlds/$(arg map_file)/map/map.world.yaml" />
  <param name="map_layer_path" value="$(find arena_simulation_setup)/worlds/$(arg map_file)/map/map.world.yaml" />
  <param name="map_file" value="$(arg map_file)" />

  <!-- DRL action frequency -->
  <rosparam command="load" file="$(find arena_bringup)/params/drl.yaml" />

  <!-- Map parameters -->
  <arg name="global_frame_id" value="map" />
  <arg name="odom_frame_id" value="odom" />

  <param name="robot_name" value="$(arg model)" />

  <!-- Entity Manager -->
  <include file="$(find arena_bringup)/launch/utils/entity_manager.launch">
    <arg name="entity_manager" value="$(arg entity_manager)" />
    <arg name="world_file" value="$(arg world_file)" />
    <arg name="sfm" value="$(arg sfm)" />
  </include>

  <!-- use simulator-->

  <!-- Flatland -->
  <include file="$(find arena_bringup)/launch/testing/simulators/flatland.launch" if="$(eval arg('simulator') == 'flatland')">
    <arg name="visualization" default="$(arg visualization)" />
    <arg name="rviz_file" value="$(arg rviz_file)" />
    <arg name="model" value="$(arg model)" />
    <arg name="show_rviz" value="$(arg show_rviz)" />
    <arg name="headless" value="$(arg headless)" />
  </include>

  <!-- Gazebo -->
  <include file="$(find arena_bringup)/launch/testing/simulators/gazebo.launch" if="$(eval arg('simulator') == 'gazebo')">
    <arg name="model" value="$(arg model)" />
    <arg name="rviz_file" value="$(arg rviz_file)" />
    <arg name="show_rviz" default="$(arg show_rviz)" />
    <arg name="world" value="$(arg world_file)"/>
    <arg name="headless" value="$(arg headless)" />
  </include>

  <!-- map server-->
  <include file="$(find arena_bringup)/launch/utils/map_server.launch">
    <arg name="map_file" value="$(arg map_file)" />
    <arg name="map_path" value="$(arg map_path)" />
  </include>

  <!-- Fake localization-->
  <include file="$(find arena_bringup)/launch/utils/fake_localization.launch">
    <arg name="ns" value="" />
    <arg name="robot_name" value="$(arg model)" />
    <arg name="global_frame_id" value="$(arg global_frame_id)" />
    <arg name="odom_frame_id" value="$(arg odom_frame_id)" />
  </include>

  <include file="$(find arena_bringup)/launch/testing/task_generator.launch">
  </include>

  <node type="create_config_file.py" pkg="rviz_utils" name="rviz_config_file_creator" />
  
  <node type="visualize_robot_model.py" pkg="rviz_utils" name="visualize_robot_model" output="screen" />

</launch>
